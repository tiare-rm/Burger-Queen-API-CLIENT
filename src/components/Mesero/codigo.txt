  const [name, setName] = useState("");
  const [products, setProducts] = useState("");

  // Estado del carrito de compra
  const [cartItems, setCartItems] = useState([]);

  // agregar un producto al carrito
  const addToCart = (product) => {
    const productWithClientName = { ...product, clientName: name };
    setCartItems([...cartItems, productWithClientName]);
  };

  // eliminar un producto del carrito
  const removeFromCart = (productId) => {
    setCartItems(cartItems.filter((item) => item.id !== productId));
  };

  // Calcula el total del pedido
  const getTotal = () => {
    const total = cartItems.reduce((acc, item) => acc + item.price, 0);
    return total.toFixed(2);
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch("http://localhost:8080/products");
        const data = await response.json();
        setProducts(data);
        console.log(data);
      } catch (error) {
        console.log(error);
      }
    };
  
    fetchData();
  }, []);

  {/* pendiente debo mostrar los productos de la carta */}
      {selectedButton === "desayuno" && (
        <div>
          {/* que debe pasar cuando se cumple la condicion del boton */}
          {products
            .filter((product) => product.category === "desayuno")
            .map((product) => (
              <div key={product.id}>
                <h3>{product.name}</h3>
                <p>${product.price}</p>
                <button onClick={() => addToCart(product)}>
                  Agregar al carrito
                </button>
              </div>
            ))}
        </div>
      )}

      {selectedButton === "menu" && (
        <div>
          {/* que debe pasar cuando se cumple la condicion del boton*/}
          {products
            .filter((product) => product.category === "menu")
            .map((product) => (
              <div key={product.id}>
                <h3>{product.name}</h3>
                <p>${product.price}</p>
                <button onClick={() => addToCart(product)}>
                  Agregar al carrito
                </button>
              </div>
            ))}
        </div>
      )}

      {/* Renderizar el carrito de compra */}
      <div className={styles.carrito}>
        <h2 className={styles.carritoTitle}>Carrito de Compra</h2>

        <div className={styles.informacionCliente}>
          <input
            type="text"
            placeholder="Nombre del cliente"
            className={styles.inputNombreCliente}
            value={name}
            onChange={(e) => setName(e.target.value)}
          />

          <div className={styles.productosSeleccionados}></div>
        </div>

        {cartItems.length === 0 ? (
          <p className={styles.nohayproductos}>
            No hay productos en el carrito
          </p>
        ) : (
          <ul>
            {cartItems.map((item) => (
              <li key={item.id}>
                {item.name} - ${item.price}
                <button
                  className={styles.eliminarCarrito}
                  onClick={() => removeFromCart(item.id)}
                >
                  Eliminar
                </button>
              </li>
            ))}
          </ul>
        )}

        <p className={styles.total}>Total: ${getTotal()}</p>
      </div>

      .carrito {
  position: absolute;
  width: 330px;
  height: 444px;
  left: 980px;
  top: 200px;
  background: #d5b794;
  border-radius: 5px;
}
.carritoTitle {
  position: absolute;
  width: 229px;
  height: 16px;
  margin-left: 50px;
  margin-top: 15px;
  font-family: "Merriweather Sans";
  font-style: normal;
  font-weight: 400;
  font-size: 20px;
  line-height: 25px;
  text-align: center;
  color: #000000;
}
.informacionCliente {
  position: absolute;
  width: 214px;
  height: 43px;
  margin-left: 45px;
  margin-top: 60px;
  border-radius: 10px;
  font-family: "Merriweather Sans";
}
.informacionCliente::placeholder {
  position: absolute;
  width: 249px;
  height: 16px;
  left: 771px;
  top: 324px;
  font-family: "Merriweather Sans";
  font-style: normal;
  font-weight: 400;
  font-size: 16px;
  line-height: 20px;
  text-align: center;
  color: rgba(0, 0, 0, 0.23);
}
.nohayproductos {
  position: absolute;
  width: 229px;
  height: 16px;
  margin-left: 50px;
  margin-top: 150px;
}
.productosSeleccionados {
  position: absolute;
  width: 289px;
  height: 250px;
  margin-left: -20px;
  margin-top: 25px;
  background: white;
  border-radius: 5px;
}
.total {
  position: absolute;
  width: 229px;
  height: 16px;
  margin-left: 50px;
  margin-top: 375px;
  font-family: "Merriweather Sans";
  font-style: normal;
  font-weight: 400;
  font-size: 20px;
  line-height: 25px;
  text-align: center;
  color: #000000;
}
